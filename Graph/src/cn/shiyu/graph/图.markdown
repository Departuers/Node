### 图   graph
```
图是一种网状数据结构，由非空的顶点集合和一个描述顶点集合关系的集合组成

图由顶点(vertex)和边(edge)组成，顶点表示对象，边表示2个对象间的连接关系

图大体分为两种，边没有指向性的叫无向图，边有指向性的叫有向图。

边可以带权值，叫带权图。比如地图的边权值表示距离，长度一样，但其表示的距离不一样

两个顶点如果有边连接，视为两个顶点相邻

相邻顶点的序列称为路径，
个人理解边有指向的一条路，就是一条路径

起点和终点重合的路径称为圈。

任意两点之间都存在路径连接的图被称为连通图，

顶点连接的所有边数叫做这个顶点的度

树与图

没有圈的连通图就是树， 

没有圈的非连通图就是森林

一条树的边数等于顶点数量-1

边数等于顶点数-1的连通图，就是树。

没有圈的有向图叫DAG，（有向无环图）顺着边的方向走回不去。看起来是有环的,但有方向,回不去

拓扑排序，将DAG中的顶点以线性方式进行排序，对于任何自顶点u到顶点v的有向边，u->v，在最后的排序结果中，顶点u总在顶点v的前面，这样的排序结果，称为拓扑序。

图的分类
        无向          有向
无权    无向无权图     有向无权图
有权    无向有权图     有向有权图

自环边:节点自己指向自己
平行边:某两个节点之间有一条以上的边
遇到图有自环边,或者平行边,要对这张图进行一些处理,大部分情况自环边或者平行边没有意义
没有自环边,没有平行边的称为简单图

图的表示法
1. 邻接矩阵（adjacency matrix）二维数组。
是用来表示图中顶点之间相邻关系的矩阵
表示的是直接连接

无向图的邻接矩阵是一个对称矩阵，有向图不一定；

不带权时使用1/0(1或者0)表示是否有边；带权值时，数值就是权值；
    a   b   c   d       
a   0   10  0   0
b   10  0   5   9
c   0   5   0   3
d   0   9   3   0

当图很稀疏，浪费空间

2. 邻接表（adjacency list）
只关心存在的边，节约空间，使用数组+链表
但是查询两点是否有边需要遍历链表
链表存的是与这个顶点相连的元素

保存权值需要另外存一个边集:就是边的集合Edge Set,保存权值
     value
from------->to
从起点到终点，有权重就是一条边
把一张图所有的边放到一个集，中，扫描边集就能得到一幅图

数组每一个元素都是一个链表，数组的下标表示顶点，
3.边集（adjacency set）
保存权值需要另外存一个边集
     value
from------->to
从起点到终点，有权重就是一条边
把一张图所有的边放到一个集，中，扫描边集就能得到一幅图