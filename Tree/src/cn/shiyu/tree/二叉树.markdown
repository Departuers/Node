### 二叉树
```
二叉树是一种特殊的树，树的每个节点最多有两个孩子节点，也可能只有一个，或者没有孩子节点

二叉树左边的叫左孩子，右边的叫右孩子。

二叉树有两个特殊形式，满二叉树，和完全二叉树。

满二叉树就是所有非叶子节点都有左孩子和右孩子。并且所有叶子节点都在同一层级。

完全二叉树：对于一个有n个节点的二叉树，按层级顺序编号，则所有节点的编号从1到n，如果这个树的所有节点和同样深度的满二叉树的编号为从1到n的节点位置相同，则这个二叉树为完全二叉树。

完全二叉树只需最后一个节点之前的节点对应齐全


属于逻辑结构，可以使用数组或者链式存储结构

链式存储
二叉树每一个包含三部分
1. 存储数据的data变量
2. 指向左孩子的left指针
3. 指向右孩子的right指针


数组存储二叉树
使用数组存储时，会按照层级顺序把二叉树的节点放到数组对应的位置上，如果某一个节点的左孩子或右孩子空缺，则数组的相应位置也空出来

这样设计可以快速定位二叉树的孩子节点和父节点。
如果一个父节点的下标为parent
那么它的左孩子下标就是2×parent+1
它的右孩子节点下标2×parent+2

如果它的左孩子下标为leftChild
它的父节点下标就是(leftChild-1)/2

如果它的右孩子下标为rightChild
它的父节点下标就是(right-2)/2

二叉树的主要应用：查找查找和维持相对顺序

二叉树的树型结构使它很适合扮演索引
二叉查找树（Binary Search Tree）：
1. 如果左子树不为空，则左子树上所有节点的值均小于根节点的值
2. 如果右子树不为空，则右子树上所有节点的值均大于根节点的值
3： 左右子树均是二分查找树

对于一个节点分布相对均衡的二叉查找树，节点总数为n，那么搜索节点的时间复杂度就是O(logn)，和树的深度一样。
依靠比较大小来查找

维持相对顺序
二叉查找树还有另外一个名字，二叉排序树(Binary Sort Tree)

！！！如果从小到大的顺序插入n个树
外观变的怪异，退化成一条链表，查询节点的时间复杂度也变成了O(n)

二叉树的自平衡有多种，红黑树，AVL树，树堆。。。

二叉堆：维持相对顺序

二叉树的遍历

深度优先遍历：前中后序遍历
广度优先遍历：层序遍历

深度遍历偏向于纵深，一头扎到底的访问方式

1. 前序遍历
输出顺序为：根节点->左子树->右子树

2. 中序遍历
输出顺序为：左子树->根节点->右子树
如果根节点的左孩子还有左孩子，则继续深入访问下去，一直找到不再有左孩子的节点，并输出该节点，

3. 后序遍历
输出顺序为：左子树->右子树->根节点

深度优先遍历可以递归实现或者栈
绝大多数递归能解决的问题，大部分都能用栈，栈和递归都有回溯的特性

广度优先遍历：层序遍历

二叉树同一层次的节点是没有直接关联的，实现需要借助队列







